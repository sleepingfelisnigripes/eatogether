[
    {
        "id": "9d44931fbddf8220",
        "type": "tab",
        "label": "API [GET]",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9508ac18071cdd7c",
        "type": "tab",
        "label": "API [Authentication]",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2708a8e82f712101",
        "type": "tab",
        "label": "Stream",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "614fbde873f759f7",
        "type": "tab",
        "label": "API Error Handling",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11a6bc149c21cc99",
        "type": "tab",
        "label": "Database access",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5a455541.3fdcac",
        "type": "tab",
        "label": "bcrypt",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b1fda389a7c4172e",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "db",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "eatogether",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "C0MP90018@@",
        "passwordFieldType": "str"
    },
    {
        "id": "891b973e774e13df",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "bdf1aad8c4b1b8e6"
            ]
        ]
    },
    {
        "id": "a074f7884e45867f",
        "type": "http response",
        "z": "9d44931fbddf8220",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 480,
        "y": 100,
        "wires": []
    },
    {
        "id": "bdf1aad8c4b1b8e6",
        "type": "template",
        "z": "9d44931fbddf8220",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Eatogether</h1>\n<h2>Coming soon...</h2>",
        "output": "str",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "a074f7884e45867f"
            ]
        ]
    },
    {
        "id": "cdfb806d0f2597eb",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/restaurants",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "1b575f2775cdf3f7"
            ]
        ]
    },
    {
        "id": "7b430bad98d3fd06",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/restaurants/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "c31bf718dbc2919e"
            ]
        ]
    },
    {
        "id": "4e51c5df855b6781",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Save reviews",
        "func": "msg.reviews = JSON.parse(JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "afd6a67f04ed94af"
            ]
        ]
    },
    {
        "id": "90e4a964f0c241a3",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "Homepage",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c49652565df6d89",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API [GET] /restaurants",
        "info": "",
        "x": 160,
        "y": 160,
        "wires": []
    },
    {
        "id": "32d9ea8b4936bf2c",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API [GET] /restaurants/:id",
        "info": "",
        "x": 170,
        "y": 300,
        "wires": []
    },
    {
        "id": "c0dbb572d4ae5c70",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Rename fields",
        "func": "\nmsg.rename_fn = payload => payload.map(\n    (item) => ({\n        restaurantID: item.restaurant_id,\n        restaurantName: item.restaurant_name,\n        restaurantImage: item.restaurant_image,  // URL of the main/facade image of the restaurant\n        noOfGroupsToday: 0,  // Number of existing groups for today\n        cuisineType: item.restaurant_cuisine_type,      // Type of cuisine served\n        address: item.restaurant_address,          // address of the restaurant\n        latlng: [item.restaurant_lat, item.restaurant_lng],          // LatLng coordinate of the restaurant\n        openingHours: item.restaurant_open_hours,     // Opening hours of the restaurant, e.g. 10:00am-9:00pm\n        rating: item.restaurant_rating,           // Average rating of the restaurant (0-5 stars)\n    })\n)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "adb69e7cea45a0a6"
            ]
        ]
    },
    {
        "id": "13c8b2f72e986e36",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Check id & rename function",
        "func": "const id = parseInt(msg.req.params.id);\n\nif (isNaN(id)){\n    throw new Error(\"id is not a number\")\n}\n\nmsg.queryParameters = {\n    id: id\n}\n\nmsg.rename_fn = (payload) => {\n    return ({\n            reviewID: payload[0].review_id,\n            timestamp: moment(payload[0].review_timestamp).format(),        // String type in ISO 8601 format, e.g. \"2022-09-26T13:25:40+10:00\"\n            reviewerID: payload[0].reviewer_id,       // The user ID of the review poster\n            reviewerName: payload[0].reviewerName,     // The name of the reviewer\n            reviewerPhoto: payload[0].reviewerPhoto,   // Url of the reviewer profile photo\n            reviewRating: payload[0].review_stars,     // The rating given by the review user\n            reviewText: payload[0].review_text,       // Text content of the review\n            reviewImages: payload[0].review_images,   // Urls of review reviewImages\n        })\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "6d999b7f48b8ff9c"
            ]
        ]
    },
    {
        "id": "8efaf43f303d44ee",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/reviews/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "13c8b2f72e986e36"
            ]
        ]
    },
    {
        "id": "83799dc4dc5ffcc3",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API [GET] /reviews/:id XXX",
        "info": "",
        "x": 170,
        "y": 420,
        "wires": []
    },
    {
        "id": "69d8a851bef8d088",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Rename fields",
        "func": "msg.payload = ({data:msg.rename_fn(msg.payload)});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 880,
        "wires": [
            [
                "3d2dcb91d122c767"
            ]
        ]
    },
    {
        "id": "3d2dcb91d122c767",
        "type": "switch",
        "z": "9d44931fbddf8220",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 880,
        "wires": [
            [
                "db641955cfd2e39c"
            ],
            [
                "f71ee2c1c887986b"
            ]
        ],
        "outputLabels": [
            "Non-empty",
            "Empty"
        ]
    },
    {
        "id": "f71ee2c1c887986b",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "613dc68a1eb615e7",
            "01b529cd88b7521f",
            "857e7939fedf61ab",
            "56b02e2758c1168d"
        ],
        "x": 542,
        "y": 925,
        "wires": []
    },
    {
        "id": "db641955cfd2e39c",
        "type": "http response",
        "z": "9d44931fbddf8220",
        "name": "HTTP response (200)",
        "statusCode": "200",
        "headers": {},
        "x": 617,
        "y": 845,
        "wires": []
    },
    {
        "id": "b6098d7d3e7a440c",
        "type": "link in",
        "z": "9d44931fbddf8220",
        "name": "[IN] Rename fields and return first one element",
        "links": [
            "39dee466b9dbb8ef",
            "51867494ecd4ba64",
            "7853acc0ab811e98",
            "dd5b3de2aef8f143",
            "7d61c8d841b27e38",
            "73d7666e8f4e7f52",
            "adb69e7cea45a0a6"
        ],
        "x": 85,
        "y": 880,
        "wires": [
            [
                "69d8a851bef8d088"
            ]
        ]
    },
    {
        "id": "51867494ecd4ba64",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "b6098d7d3e7a440c"
        ],
        "x": 755,
        "y": 480,
        "wires": []
    },
    {
        "id": "39dee466b9dbb8ef",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "b6098d7d3e7a440c"
        ],
        "x": 1545,
        "y": 360,
        "wires": []
    },
    {
        "id": "0b833ad22fdf6db1",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "Rename fields and return results",
        "info": "",
        "x": 190,
        "y": 820,
        "wires": []
    },
    {
        "id": "2e5d6ea0ff34c392",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Check id",
        "func": "const id = parseInt(msg.req.params.id);\n\nif (isNaN(id)){\n    throw new Error(\"id is not a number\")\n}\n\nmsg.queryParameters = {\n    id: id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "2916c2548c677a2b"
            ]
        ]
    },
    {
        "id": "77910d971814480b",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/groups/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "2e5d6ea0ff34c392"
            ]
        ]
    },
    {
        "id": "251541dda5427485",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API [GET] /groups/:id XXX",
        "info": "",
        "x": 170,
        "y": 540,
        "wires": []
    },
    {
        "id": "7853acc0ab811e98",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "b6098d7d3e7a440c"
        ],
        "x": 975,
        "y": 600,
        "wires": []
    },
    {
        "id": "d4782122a7479d8f",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Check id",
        "func": "const id = parseInt(msg.req.params.id);\n\nif (isNaN(id)){\n    throw new Error(\"id is not a number\")\n}\n\nmsg.queryParameters = {\n    id: id\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 320,
        "y": 740,
        "wires": [
            [
                "81959ba8bcc1acee"
            ]
        ]
    },
    {
        "id": "b0c85978b39e3b2d",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/users/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "d4782122a7479d8f"
            ]
        ]
    },
    {
        "id": "adf38d50698856c2",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API [GET] /users/:user-id",
        "info": "",
        "x": 170,
        "y": 680,
        "wires": []
    },
    {
        "id": "7d61c8d841b27e38",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "b6098d7d3e7a440c"
        ],
        "x": 1485,
        "y": 740,
        "wires": []
    },
    {
        "id": "4ace026673dd5efc",
        "type": "http in",
        "z": "9d44931fbddf8220",
        "name": "",
        "url": "/uploads/:file",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1120,
        "wires": [
            [
                "bbe5586bd5c959a1"
            ]
        ]
    },
    {
        "id": "17298d496b158ab9",
        "type": "file in",
        "z": "9d44931fbddf8220",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 630,
        "y": 1120,
        "wires": [
            [
                "705e968a75979608"
            ]
        ]
    },
    {
        "id": "bbe5586bd5c959a1",
        "type": "change",
        "z": "9d44931fbddf8220",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$join($append(\"/data/uploads/\", msg.req.params.file))\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "17298d496b158ab9"
            ]
        ]
    },
    {
        "id": "705e968a75979608",
        "type": "http response",
        "z": "9d44931fbddf8220",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Type": "image/png"
        },
        "x": 830,
        "y": 1120,
        "wires": []
    },
    {
        "id": "abe91fd5e8ad375b",
        "type": "catch",
        "z": "9d44931fbddf8220",
        "name": "No such files",
        "scope": [
            "17298d496b158ab9"
        ],
        "uncaught": false,
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "0865b9c54a263d3a"
            ]
        ]
    },
    {
        "id": "31744d4c283324b9",
        "type": "http response",
        "z": "9d44931fbddf8220",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 1020,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0865b9c54a263d3a",
        "type": "change",
        "z": "9d44931fbddf8220",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "404 Not found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1180,
        "wires": [
            [
                "31744d4c283324b9"
            ]
        ]
    },
    {
        "id": "c31bf718dbc2919e",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Check id",
        "func": "const id = parseInt(msg.req.params.id);\n\nif (isNaN(id)){\n    throw new Error(\"id is not a number\")\n}\n\nmsg.queryParameters = {\n    id: id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "5c55524709924240"
            ]
        ]
    },
    {
        "id": "7fced90e973e5f13",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Rename function",
        "func": "msg.participants = JSON.parse(JSON.stringify(msg.payload));\n\nmsg.rename_fn = (payload) => {\n    return ({\n        groupID: payload[0].group_id,\n        restaurantID: payload[0].restaurant_id,         // The restaurant that the group is going\n        initUserID: payload[0].init_user_id,           // User ID of the user who initiated the group\n        timestamp: moment(payload[0].group_meeting_timestamp).format(),            // Timestamp of the meeting. String type in ISO 8601 format, e.g. \"2022-09-26T13:25:40+10:00\"\n        maxParticipants: payload[0].group_maximum,      // Number of maximum participants\n        currentParticipants: msg.participants.length,  // Current number of participants joined\n        participants: msg.participants,         // List of participants\n    })};\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 690,
        "y": 600,
        "wires": [
            [
                "f2503283ceb878c7"
            ]
        ]
    },
    {
        "id": "3cb114fa84ed2f36",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Save upcomingGroups & rename func",
        "func": "msg.upcomingGroups = msg.payload.reduce((pre, cur) => {\n    return pre.add(cur.group_id);\n}, new Set());\n\nmsg.upcomingGroups = Array.from(msg.upcomingGroups);\n\nmsg.upcomingGroups =  msg.upcomingGroups.map(groupID => {\n    let restaurant = msg.payload.find(element => element.group_id === groupID);\n    return({\n        groupID: groupID,\n        restaurantID: restaurant.restaurant_id,         // The restaurant that the group is going\n        initUserID: restaurant.init_user_id,           // User ID of the user who initiated the group\n        timestamp: moment(restaurant.group_meeting_timestamp).format(),            // Timestamp of the meeting. String type in ISO 8601 format, e.g. \"2022-09-26T13:25:40+10:00\"\n        maxParticipants: restaurant.group_maximum,      // Number of maximum participants\n        currentParticipants:  msg.payload.filter(item => item.group_id === groupID).length,  // Current number of participants joined\n        participants: msg.payload.filter(item => item.group_id === groupID),         // List of participants\n    })\n});\n\n\nmsg.rename_fn = (payload) => {\n    if (payload.length === 0){\n        throw new Error(\"Restaurant not found\")\n    }\n    return payload.map(\n        (item) => ({\n            restaurantID: item.restaurant_id,\n            restaurantName: item.restaurant_name,\n            restaurantImage: item.restaurant_image,  // URL of the main/facade image of the restaurant\n            noOfGroupsToday: 0,  // Number of existing groups for today\n            cuisineType: item.restaurant_cuisine_type,      // Type of cuisine served\n            address: item.restaurant_address,          // address of the restaurant\n            latlng: [item.restaurant_lat, item.restaurant_lng],          // LatLng coordinate of the restaurant\n            openingHours: item.restaurant_open_hours,     // Opening hours of the restaurant, e.g. 10:00am-9:00pm\n            rating: 3,           // Average rating of the restaurant (0-5 stars)\n            reviews: msg.reviews,\n            upcomingGroups: msg.upcomingGroups,\n    }))[0]};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "bb523e0979386561"
            ]
        ]
    },
    {
        "id": "44dd327c0fa40256",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "GET image files",
        "info": "",
        "x": 150,
        "y": 1060,
        "wires": []
    },
    {
        "id": "adb69e7cea45a0a6",
        "type": "link out",
        "z": "9d44931fbddf8220",
        "name": "",
        "mode": "link",
        "links": [
            "b6098d7d3e7a440c"
        ],
        "x": 675,
        "y": 220,
        "wires": []
    },
    {
        "id": "caabb44fef03e7fb",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Save favouriteRestaurants & rename function",
        "func": "msg.favouriteRestaurants = msg.payload.map(item => ({\n    restaurant_id: item.favourite_restaurant_id,\n    restaurantName: item.restaurant_name,\n    restaurantImage: item.restaurant_image,  // URL of the main/facade image of the restaurant\n    cuisineType: item.restaurant_cuisine_type,      // Type of cuisine served\n    address: item.restaurant_address,          // address of the restaurant\n    latlng: {latitude: item.restaurant_lat,\n        longitude: item.restaurant_lng\n    },          // LatLng coordinate of the restaurant\n    openingHours: item.restaurant_open_hours,     // Opening hours of the restaurant, e.g. 10:00am-9:00pm\n    rating: item.restaurant_rating,           // Average rating of the restaurant (0-5 stars)\n}));\n\nmsg.rename_fn = (payload) => {\n    if (payload.length === 0){\n        throw new Error(\"User not found\")\n    }\n    let result = {\n        userID: payload[0].user_id,\n        userName: payload[0].username,\n        gender: payload[0].gender,\n        userPhoto: payload[0].user_photo,        // URL to the user's photo;\n        favouriteRestaurants: msg.favouriteRestaurants,\n        upcomingGroups: msg.upcomingGroups,\n    };\n    return result;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 740,
        "wires": [
            [
                "7d61c8d841b27e38"
            ]
        ]
    },
    {
        "id": "cfe8934402dc2364",
        "type": "function",
        "z": "9d44931fbddf8220",
        "name": "Save upcomingGroups",
        "func": "msg.upcomingGroups = msg.payload.reduce((pre, cur) => {\n    return pre.add(cur.group_id);\n}, new Set());\n\nmsg.upcomingGroups = Array.from(msg.upcomingGroups);\n\nmsg.upcomingGroups =  msg.upcomingGroups.map(groupID => {\n    let group = msg.payload.find(element => element.group_id === groupID);\n    \n    return({\n        groupID: groupID,\n        restaurantID: group.restaurant_id,         // The restaurant that the group is going\n        restaurantName: group.restaurant_name,\n        restaurantImage: group.restaurant_image,\n        initUserID: group.group_init_user_id,           // User ID of the user who initiated the group\n        timestamp: moment(group.group_meeting_timestamp).format(),            // Timestamp of the meeting. String type in ISO 8601 format, e.g. \"2022-09-26T13:25:40+10:00\"\n        maxParticipants: group.group_maximum,      // Number of maximum participants\n        currentParticipants:  msg.payload.filter(item => item.group_id === groupID).length,  // Current number of participants joined\n        participants: msg.payload.filter(item => item.group_id === groupID).map(item => ({\n            userID: item.user_id,\n            userName: item.username,\n            gender: item.gender,\n            userPhoto: item.user_photo,\n        })),         // List of participants\n    })\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 790,
        "y": 740,
        "wires": [
            [
                "5e3454d885273475"
            ]
        ]
    },
    {
        "id": "d39d4b3026f30982",
        "type": "http response",
        "z": "9d44931fbddf8220",
        "name": "HTTP response (400)",
        "statusCode": "400",
        "headers": {},
        "x": 620,
        "y": 1300,
        "wires": []
    },
    {
        "id": "857e7939fedf61ab",
        "type": "link in",
        "z": "9d44931fbddf8220",
        "name": "[IN] Generate error message",
        "links": [
            "5f47d696995e5c0d",
            "a0110f2b25cddffb",
            "f71ee2c1c887986b"
        ],
        "x": 155,
        "y": 1340,
        "wires": [
            [
                "b1c4d9f5421b89b7"
            ]
        ]
    },
    {
        "id": "7670e64ddc7635f9",
        "type": "catch",
        "z": "9d44931fbddf8220",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "b1c4d9f5421b89b7"
            ]
        ]
    },
    {
        "id": "b1c4d9f5421b89b7",
        "type": "change",
        "z": "9d44931fbddf8220",
        "name": "Generate error message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "$now(\"[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]\",\"+1100\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.status",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.message",
                "pt": "msg",
                "to": "$exists(error.message)?error.message:\"Check your input\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1300,
        "wires": [
            [
                "d39d4b3026f30982"
            ]
        ]
    },
    {
        "id": "d2e581ad871bdd38",
        "type": "comment",
        "z": "9d44931fbddf8220",
        "name": "API Response with Error",
        "info": "",
        "x": 170,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1b575f2775cdf3f7",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET restaurants",
        "query": "SELECT * FROM restaurant\nORDER BY restaurant_id ASC;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "c0dbb572d4ae5c70"
            ]
        ]
    },
    {
        "id": "bb523e0979386561",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET restaurants",
        "query": "SELECT * \nFROM restaurant\nWHERE restaurant_id=$id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1420,
        "y": 360,
        "wires": [
            [
                "39dee466b9dbb8ef"
            ]
        ]
    },
    {
        "id": "6d999b7f48b8ff9c",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET review",
        "query": "SELECT \nreview.*,\npublic.\"user\".username as \"reviewerName\",\npublic.\"user\".user_photo as \"reviewerPhoto\"\nFROM review\nINNER JOIN public.\"user\"\nON review.reviewer_id = public.\"user\".user_id\nWHERE review_id = $id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 630,
        "y": 480,
        "wires": [
            [
                "51867494ecd4ba64"
            ]
        ]
    },
    {
        "id": "f2503283ceb878c7",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET group",
        "query": "SELECT *\nFROM public.group\nWHERE group_id = $id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "7853acc0ab811e98"
            ]
        ]
    },
    {
        "id": "5e3454d885273475",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET user",
        "query": "SELECT public.\"user\".user_id, \npublic.\"user\".username, \npublic.\"user\".gender, \npublic.\"user\".user_photo, \nuser_favourite_restaurant.restaurant_id as favourite_restaurant_id,\nrestaurant.restaurant_name,\nrestaurant.restaurant_image,\nrestaurant.restaurant_cuisine_type,\nrestaurant.restaurant_address,\nrestaurant.restaurant_lat,\nrestaurant.restaurant_lng,\nrestaurant.restaurant_open_hours,\nrestaurant.restaurant_rating\nFROM public.\"user\"\nINNER JOIN user_favourite_restaurant\nON public.\"user\".user_id = user_favourite_restaurant.user_id\nINNER JOIN public.restaurant\nON user_favourite_restaurant.restaurant_id = public.restaurant.restaurant_id\nWHERE public.\"user\".user_id = $id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 740,
        "wires": [
            [
                "caabb44fef03e7fb"
            ]
        ]
    },
    {
        "id": "5c55524709924240",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET reviews",
        "query": "SELECT \nreview.review_id as \"reviewID\",\nreview.restaurant_id as \"restaurantID\", \nreview.reviewer_id as \"reviewerID\", \npublic.\"user\".username as \"reviewerName\",\npublic.\"user\".user_photo as \"reviewerPhoto\",\nreview.review_rating as \"reviewRating\",\nreview.review_text as \"reviewText\",\nreview.review_images as \"reviewImages\"\nFROM review\nINNER JOIN public.\"user\"\nON review.reviewer_id = public.\"user\".user_id\nWHERE restaurant_id = $id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "4e51c5df855b6781"
            ]
        ]
    },
    {
        "id": "2916c2548c677a2b",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET participants",
        "query": "SELECT public.\"user\".user_id, public.\"user\".username, public.\"user\".gender, public.\"user\".user_photo\nFROM public.user_group\nINNER JOIN public.\"user\"\nON public.user_group.user_id = public.\"user\".user_id\nWHERE group_id = $id;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 600,
        "wires": [
            [
                "7fced90e973e5f13"
            ]
        ]
    },
    {
        "id": "afd6a67f04ed94af",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET groups and participants",
        "query": "SELECT public.user_group.group_id, public.\"user\".user_id, public.\"user\".username, public.\"user\".gender, public.\"user\".user_photo\nFROM public.user_group\nINNER JOIN public.\"user\"\n    ON public.user_group.user_id = public.\"user\".user_id\nINNER JOIN public.\"group\"\n    ON public.user_group.group_id = public.\"group\".group_id\nWHERE public.\"group\".restaurant_id = $id AND public.\"group\".group_meeting_timestamp > NOW();",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 360,
        "wires": [
            [
                "3cb114fa84ed2f36"
            ]
        ]
    },
    {
        "id": "81959ba8bcc1acee",
        "type": "postgresql",
        "z": "9d44931fbddf8220",
        "name": "GET groups and participants",
        "query": "SELECT public.user_group.group_id,\npublic.\"group\".restaurant_id,\npublic.\"restaurant\".restaurant_name,\npublic.\"restaurant\".restaurant_image,\npublic.\"group\".group_init_user_id,\npublic.\"user\".user_id, \npublic.\"user\".username, \npublic.\"user\".gender, \npublic.\"user\".user_photo\nFROM public.user_group\nINNER JOIN public.\"user\"\n    ON public.user_group.user_id = public.\"user\".user_id\nINNER JOIN public.\"group\"\n    ON public.user_group.group_id = public.\"group\".group_id\nINNER JOIN public.restaurant\n    ON public.\"group\".restaurant_id = public.\"restaurant\".restaurant_id\nWHERE public.user_group.user_id = $id AND public.\"group\".group_meeting_timestamp > NOW();",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 740,
        "wires": [
            [
                "cfe8934402dc2364"
            ]
        ]
    },
    {
        "id": "64c43d7f952ea4a6",
        "type": "http in",
        "z": "9508ac18071cdd7c",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "ca1f73ec0ab301d8"
            ]
        ]
    },
    {
        "id": "dd3349013da80e1a",
        "type": "http in",
        "z": "9508ac18071cdd7c",
        "name": "",
        "url": "/register",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "7fe258481b668248",
                "7568532dc28d9c21"
            ]
        ]
    },
    {
        "id": "beddb9ab771c6a82",
        "type": "comment",
        "z": "9508ac18071cdd7c",
        "name": "API [POST] /register",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "d4f13dba9812a8b9",
        "type": "bcrypt",
        "z": "9508ac18071cdd7c",
        "name": "Verify hash (10 rounds)",
        "action": "verify",
        "field": "checkpassword",
        "hash": "dbReturn.password",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 740,
        "y": 420,
        "wires": [
            [
                "6ae50629e63c0487"
            ]
        ]
    },
    {
        "id": "9af4cd98c7e39877",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dbReturn",
                "pt": "msg",
                "to": "payload.0",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 420,
        "wires": [
            [
                "d4f13dba9812a8b9"
            ]
        ]
    },
    {
        "id": "faf07ca11b8b37d7",
        "type": "switch",
        "z": "9508ac18071cdd7c",
        "name": "Return length",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 440,
        "wires": [
            [
                "9af4cd98c7e39877"
            ],
            [
                "e0481ab9b77c161b"
            ]
        ]
    },
    {
        "id": "107377c4619f3c2c",
        "type": "postgresql",
        "z": "9508ac18071cdd7c",
        "name": "GET user by username",
        "query": "SELECT * FROM \"user\"\nWHERE username=$username;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 340,
        "wires": [
            [
                "faf07ca11b8b37d7"
            ]
        ]
    },
    {
        "id": "b5396d124f06e9c2",
        "type": "comment",
        "z": "9508ac18071cdd7c",
        "name": "API [POST] /login",
        "info": "",
        "x": 140,
        "y": 280,
        "wires": []
    },
    {
        "id": "ca1f73ec0ab301d8",
        "type": "json",
        "z": "9508ac18071cdd7c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "6bc50fb0a04c5d66"
            ]
        ]
    },
    {
        "id": "9701c820f130362f",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "HTTP response (400)",
        "statusCode": "400",
        "headers": {},
        "x": 620,
        "y": 700,
        "wires": []
    },
    {
        "id": "a12b11219e27723f",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "Generate error message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "$now(\"[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]\",\"+1100\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.status",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.message",
                "pt": "msg",
                "to": "$exists(error.message)?error.message:\"Check your input\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 700,
        "wires": [
            [
                "9701c820f130362f",
                "c6190af60487aa89"
            ]
        ]
    },
    {
        "id": "409f3755b3840ed1",
        "type": "comment",
        "z": "9508ac18071cdd7c",
        "name": "API Response with Error",
        "info": "",
        "x": 170,
        "y": 620,
        "wires": []
    },
    {
        "id": "6bc50fb0a04c5d66",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queryParameters.username",
                "pt": "msg",
                "to": "payload.username",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "checkpassword",
                "pt": "msg",
                "to": "payload.password",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 340,
        "wires": [
            [
                "107377c4619f3c2c"
            ]
        ]
    },
    {
        "id": "6ae50629e63c0487",
        "type": "switch",
        "z": "9508ac18071cdd7c",
        "name": "",
        "property": "match",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "d67c2a0a99087116"
            ],
            [
                "061f03860bbd5383"
            ]
        ]
    },
    {
        "id": "a096d03a33ad92c3",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1340,
        "y": 380,
        "wires": []
    },
    {
        "id": "061f03860bbd5383",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"status\": \"error\", \"message\":\"Invalid authentication\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 440,
        "wires": [
            [
                "7f14d5e91fe7b860"
            ]
        ]
    },
    {
        "id": "7f14d5e91fe7b860",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 1340,
        "y": 440,
        "wires": []
    },
    {
        "id": "e0481ab9b77c161b",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"success\":false,\"message\":\"User does not exist\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 500,
        "wires": [
            [
                "59bfe17432d8acfe"
            ]
        ]
    },
    {
        "id": "59bfe17432d8acfe",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 720,
        "y": 500,
        "wires": []
    },
    {
        "id": "e77088ee80defe15",
        "type": "jimp-image",
        "z": "9508ac18071cdd7c",
        "name": "",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "150",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "auto",
        "parameter3": "RESIZE_BILINEAR",
        "parameter3Type": "resizeMode",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 3,
        "jimpFunction": "resize",
        "selectedJimpFunction": {
            "name": "resize",
            "fn": "resize",
            "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
            "parameters": [
                {
                    "name": "w",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "h",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "mode",
                    "type": "resizeMode",
                    "required": false,
                    "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                }
            ]
        },
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "54cb305d96ee3eb4"
            ]
        ]
    },
    {
        "id": "7a3a6834b1524f06",
        "type": "image viewer",
        "z": "9508ac18071cdd7c",
        "name": "",
        "width": 160,
        "data": "image.payload",
        "dataType": "msg",
        "active": true,
        "x": 1670,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7fe258481b668248",
        "type": "function",
        "z": "9508ac18071cdd7c",
        "name": "Process input",
        "func": "const basePath = \"/data/uploads/\";\nconst imageFileName = msg.req.files.length > 0 ?\n    moment().unix() +\"-\"+ msg.req.files[0].fieldname + \".png\" : null;\nconst saltRounds = 10;\nconst salt = bcrypt.genSaltSync(saltRounds);\nconst photoBaseUrl = \"https://api.eatogether.site/uploads/\"\n\nmsg.image = (msg.req.files \n    && msg.req.files.length > 0 \n    && msg.req.files[0].fieldname === \"user_photo\" \n    && msg.req.files[0].buffer.length > 0) ? \n    ({\n    payload: msg.req.files[0].buffer,\n    filename: basePath + imageFileName\n    }) : null;\nmsg.queryParameters =  ({\n        username: msg.payload.username,\n        password: bcrypt.hashSync(msg.payload.password, salt),\n        gender: msg.payload.gender,\n        user_photo: imageFileName ? photoBaseUrl + imageFileName : \"\"\n    });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "b78a9916297dfdad"
            ]
        ]
    },
    {
        "id": "5f35803d1912ae27",
        "type": "jimp-image",
        "z": "9508ac18071cdd7c",
        "name": "",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "image.filename",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "write",
        "selectedJimpFunction": {
            "name": "write",
            "fn": "write",
            "description": "Write to file. NOTE: You can specify an alternative file extension type to change the type. Currently support types are jpg, png, bmp.",
            "parameters": [
                {
                    "name": "filename",
                    "type": "str",
                    "required": true,
                    "hint": "Name of the file",
                    "defaultType": "str"
                }
            ]
        },
        "x": 1530,
        "y": 120,
        "wires": [
            [
                "7a3a6834b1524f06",
                "b75c33abdaff3a8d"
            ]
        ]
    },
    {
        "id": "af19ec236c57d42a",
        "type": "jimp-image",
        "z": "9508ac18071cdd7c",
        "name": "",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 910,
        "y": 120,
        "wires": [
            [
                "c2c16dbacea1de04"
            ]
        ]
    },
    {
        "id": "c2c16dbacea1de04",
        "type": "switch",
        "z": "9508ac18071cdd7c",
        "name": "Check if width > 150",
        "property": "imageInfo.width",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "150",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "e77088ee80defe15"
            ],
            [
                "54cb305d96ee3eb4"
            ]
        ]
    },
    {
        "id": "54cb305d96ee3eb4",
        "type": "jimp-image",
        "z": "9508ac18071cdd7c",
        "name": "",
        "data": "image.payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "75",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "image.payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "quality",
        "selectedJimpFunction": {
            "name": "quality",
            "fn": "quality",
            "description": "Set the quality of the image. Useful for reducing size of image before calling the write function.",
            "parameters": [
                {
                    "name": "quality",
                    "type": "num",
                    "required": true,
                    "hint": "Quality value 1 ~ 100"
                }
            ]
        },
        "x": 1410,
        "y": 120,
        "wires": [
            [
                "5f35803d1912ae27"
            ]
        ]
    },
    {
        "id": "a116885dc3a2617b",
        "type": "catch",
        "z": "9508ac18071cdd7c",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 140,
        "y": 680,
        "wires": [
            [
                "a12b11219e27723f",
                "11ab0a3b6684adfc"
            ]
        ]
    },
    {
        "id": "11ab0a3b6684adfc",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "Catch all errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 660,
        "wires": []
    },
    {
        "id": "b78a9916297dfdad",
        "type": "postgresql",
        "z": "9508ac18071cdd7c",
        "name": "INSERT INTO user",
        "query": "INSERT INTO public.\"user\"(\n\tusername, password, gender, user_photo)\n\tVALUES ($username, $password, $gender, $user_photo);",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "520c76fe5483db4a"
            ]
        ]
    },
    {
        "id": "c6190af60487aa89",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "Error message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 640,
        "wires": []
    },
    {
        "id": "520c76fe5483db4a",
        "type": "switch",
        "z": "9508ac18071cdd7c",
        "name": "",
        "property": "image",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "af19ec236c57d42a"
            ],
            [
                "d06a31bb9f66a3a3"
            ]
        ]
    },
    {
        "id": "92b47204f10bb6cf",
        "type": "catch",
        "z": "9508ac18071cdd7c",
        "name": "",
        "scope": [
            "b78a9916297dfdad"
        ],
        "uncaught": false,
        "x": 110,
        "y": 800,
        "wires": [
            [
                "cfee28800b7ad0eb",
                "eeac43d654d4caa1"
            ]
        ]
    },
    {
        "id": "d186408beb875189",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "Error message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 760,
        "wires": []
    },
    {
        "id": "eeac43d654d4caa1",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "Generate error message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "$now(\"[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]\",\"+1100\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.status",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.message",
                "pt": "msg",
                "to": "$exists(error.message)?error.message:\"Check your input\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 820,
        "wires": [
            [
                "f1de8435be464a2d"
            ]
        ]
    },
    {
        "id": "c177272646fb7494",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "HTTP response (400)",
        "statusCode": "400",
        "headers": {},
        "x": 980,
        "y": 820,
        "wires": []
    },
    {
        "id": "cfee28800b7ad0eb",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "Catch register error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 780,
        "wires": []
    },
    {
        "id": "4c80df0d5f0fcdf6",
        "type": "http response",
        "z": "9508ac18071cdd7c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 100,
        "wires": []
    },
    {
        "id": "b75c33abdaff3a8d",
        "type": "postgresql",
        "z": "9508ac18071cdd7c",
        "name": "GET new user info",
        "query": "SELECT user_id, username, gender, user_photo\nFROM public.\"user\"\nWHERE username=$username;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1710,
        "y": 100,
        "wires": [
            [
                "7305c7425e077055"
            ]
        ]
    },
    {
        "id": "7305c7425e077055",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"success\":true,\t\"data\":payload\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1920,
        "y": 100,
        "wires": [
            [
                "4c80df0d5f0fcdf6"
            ]
        ]
    },
    {
        "id": "d67c2a0a99087116",
        "type": "function",
        "z": "9508ac18071cdd7c",
        "name": "Login Response",
        "func": "const ETToken = jwt.sign({ user_id: msg.payload[0].user_id.toString() }, \n    'eatogether',\n    { expiresIn: '30d' });\n    \n// if you're using common js\nconst StreamChat = streamChat.StreamChat;\n\n// instantiate your stream client using the API key and secret\n// the secret is only used server side and gives you full access to the API\n// find your API keys here https://getstream.io/dashboard/\nconst serverClient = StreamChat.getInstance('vsw2j53wvgv6', 'erddkjwrke4mzhf24j5zhc3rxkhbrxqr5fcfrcf9n8awrdgxn9vqh5a6u5upnth8');\n\n// generate a token for the user with id 'john'\nconst streamToken = serverClient.createToken(msg.payload[0].user_id.toString());\n\n// next, hand this token to the client in your in your login or registration response\n\nmsg.payload = {\n    \"status\": \"success\",\n    \"data\":{\n        \"user_id\": msg.payload[0].user_id.toString(),\n        \"username\": msg.payload[0].username,\n        \"gender\": msg.payload[0].gender,\n        \"user_photo\": msg.payload[0].user_photo,\n        \"ETToken\": ETToken,\n        \"StreamToken\": streamToken\n    }\t\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "streamChat",
                "module": "stream-chat"
            }
        ],
        "x": 1120,
        "y": 380,
        "wires": [
            [
                "a096d03a33ad92c3",
                "702c5373c1c8bcf8"
            ]
        ]
    },
    {
        "id": "7568532dc28d9c21",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "New user register",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 160,
        "wires": []
    },
    {
        "id": "d06a31bb9f66a3a3",
        "type": "link out",
        "z": "9508ac18071cdd7c",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "bbfbb63ddb111ca7"
        ],
        "x": 855,
        "y": 180,
        "wires": []
    },
    {
        "id": "bbfbb63ddb111ca7",
        "type": "link in",
        "z": "9508ac18071cdd7c",
        "name": "link in 1",
        "links": [
            "d06a31bb9f66a3a3"
        ],
        "x": 1585,
        "y": 60,
        "wires": [
            [
                "b75c33abdaff3a8d"
            ]
        ]
    },
    {
        "id": "f1de8435be464a2d",
        "type": "change",
        "z": "9508ac18071cdd7c",
        "name": "Common error",
        "rules": [
            {
                "t": "change",
                "p": "payload.message",
                "pt": "msg",
                "from": ".*duplicate key value violates unique constraint.*username.*",
                "fromt": "re",
                "to": "Username already taken",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 820,
        "wires": [
            [
                "c177272646fb7494",
                "d186408beb875189"
            ]
        ]
    },
    {
        "id": "702c5373c1c8bcf8",
        "type": "debug",
        "z": "9508ac18071cdd7c",
        "name": "User log in",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 320,
        "wires": []
    },
    {
        "id": "736c0d886ce3de7c",
        "type": "inject",
        "z": "2708a8e82f712101",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "b6216e0a4aa51b54"
            ]
        ]
    },
    {
        "id": "c3e730242edd01a2",
        "type": "debug",
        "z": "2708a8e82f712101",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "b6216e0a4aa51b54",
        "type": "function",
        "z": "2708a8e82f712101",
        "name": "",
        "func": "// if you're using common js\nconst StreamChat = streamChat.StreamChat;\n\n// instantiate your stream client using the API key and secret\n// the secret is only used server side and gives you full access to the API\n// find your API keys here https://getstream.io/dashboard/\nconst serverClient = StreamChat.getInstance('vsw2j53wvgv6', 'erddkjwrke4mzhf24j5zhc3rxkhbrxqr5fcfrcf9n8awrdgxn9vqh5a6u5upnth8');\n\n// generate a token for the user with id 'john'\nconst token = serverClient.createToken('john');\n// next, hand this token to the client in your in your login or registration response\n\n// instantiate a new client (client side)\nconst client = StreamChat.getInstance('vsw2j53wvgv6');\n\nmsg.token = token;\nmsg.client = client;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "streamChat",
                "module": "stream-chat"
            }
        ],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "c3e730242edd01a2"
            ]
        ]
    },
    {
        "id": "85c6baec64852bd5",
        "type": "inject",
        "z": "11a6bc149c21cc99",
        "name": "Input",
        "props": [
            {
                "p": "name",
                "v": "Master Lanzhou Noodle Bar - Melbourne Uni",
                "vt": "str"
            },
            {
                "p": "image",
                "v": "https://lh5.googleusercontent.com/p/AF1QipOF1pIjlK6GlrS6RLozXUCA2ojSDJA7RbmvtMqM=w408-h291-k-no",
                "vt": "str"
            },
            {
                "p": "cuisine_type",
                "v": "Chinese",
                "vt": "str"
            },
            {
                "p": "address",
                "v": "Shop F/700 Swanston St, Carlton VIC 3053",
                "vt": "str"
            },
            {
                "p": "latitude",
                "v": "-37.80006793035085",
                "vt": "num"
            },
            {
                "p": "longitude",
                "v": "144.9651197406779",
                "vt": "num"
            },
            {
                "p": "opening_hours",
                "v": "10:30AM-5PM",
                "vt": "str"
            },
            {
                "p": "queryParameters",
                "v": "{\t   \"name\": msg.name,\t   \"image\": msg.image,\t   \"cuisine_type\":msg.cuisine_type,\t   \"address\":msg.address,\t   \"latitude\":msg.latitude,\t   \"longitude\":msg.longitude,\t   \"opening_hours\":msg.opening_hours\t}",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "a1c837b25cb71b19"
            ]
        ]
    },
    {
        "id": "1935d058d95bd247",
        "type": "debug",
        "z": "11a6bc149c21cc99",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "cb4d8a0d8e663c76",
        "type": "comment",
        "z": "11a6bc149c21cc99",
        "name": "Add a restaurant",
        "info": "",
        "x": 120,
        "y": 120,
        "wires": []
    },
    {
        "id": "e9bf0dad67698547",
        "type": "inject",
        "z": "11a6bc149c21cc99",
        "name": "Input",
        "props": [
            {
                "p": "username",
                "v": "jeffrey",
                "vt": "str"
            },
            {
                "p": "password",
                "v": "jeffrey1234",
                "vt": "str"
            },
            {
                "p": "gender",
                "v": "M",
                "vt": "str"
            },
            {
                "p": "user_photo",
                "v": "https://picsum.photos/100/100",
                "vt": "str"
            },
            {
                "p": "queryParameters",
                "v": "{\t\"username\": msg.username, \t\"password\": msg.password, \t\"gender\": msg.gender, \t\"user_photo\": msg.user_photo\t}",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "de34d73ddb843e11"
            ]
        ]
    },
    {
        "id": "e94e0eb68f82da5e",
        "type": "debug",
        "z": "11a6bc149c21cc99",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "5b475d76411c26e9",
        "type": "comment",
        "z": "11a6bc149c21cc99",
        "name": "Add a user",
        "info": "",
        "x": 100,
        "y": 280,
        "wires": []
    },
    {
        "id": "f489a352a4d69193",
        "type": "inject",
        "z": "11a6bc149c21cc99",
        "name": "Input (Correct PW)",
        "props": [
            {
                "p": "username",
                "v": "jeffrey",
                "vt": "str"
            },
            {
                "p": "checkpassword",
                "v": "jeffrey1234",
                "vt": "str"
            },
            {
                "p": "queryParameters",
                "v": "{\t    \"username\":msg.username\t}",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "6b9cc65ee8c67bf7"
            ]
        ]
    },
    {
        "id": "2fbe75af48490c11",
        "type": "comment",
        "z": "11a6bc149c21cc99",
        "name": "Authenticate user",
        "info": "",
        "x": 120,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ad6d566ca18f433",
        "type": "debug",
        "z": "11a6bc149c21cc99",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "match",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "8b68981d1321ab20",
        "type": "change",
        "z": "11a6bc149c21cc99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dbReturn",
                "pt": "msg",
                "to": "payload.0",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 460,
        "wires": [
            [
                "fc72f6dd27a8929c"
            ]
        ]
    },
    {
        "id": "12a66479f6c677f0",
        "type": "catch",
        "z": "11a6bc149c21cc99",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 680,
        "wires": [
            [
                "a32b78973e299878"
            ]
        ]
    },
    {
        "id": "a32b78973e299878",
        "type": "debug",
        "z": "11a6bc149c21cc99",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 680,
        "wires": []
    },
    {
        "id": "0939480117897ec3",
        "type": "switch",
        "z": "11a6bc149c21cc99",
        "name": "Return length",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 500,
        "wires": [
            [
                "8b68981d1321ab20"
            ],
            [
                "e80a21c5e6c1a754"
            ]
        ]
    },
    {
        "id": "e80a21c5e6c1a754",
        "type": "debug",
        "z": "11a6bc149c21cc99",
        "name": "Error: no such user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\"error\": \"No such user\"}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 540,
        "wires": []
    },
    {
        "id": "9b3d153f58394cc0",
        "type": "inject",
        "z": "11a6bc149c21cc99",
        "name": "Input (Wrong PW)",
        "props": [
            {
                "p": "username",
                "v": "jeffrey",
                "vt": "str"
            },
            {
                "p": "checkpassword",
                "v": "1234",
                "vt": "str"
            },
            {
                "p": "queryParameters",
                "v": "{\t    \"username\":msg.username\t}",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "6b9cc65ee8c67bf7"
            ]
        ]
    },
    {
        "id": "a1c837b25cb71b19",
        "type": "postgresql",
        "z": "11a6bc149c21cc99",
        "name": "INSERT INTO restaurant",
        "query": "INSERT INTO public.restaurant(\n\t name, image, cuisine_type, address, latitude, longitude, opening_hours)\n\tVALUES ($name, \n\t\t\t$image,\n\t\t\t$cuisine_type, \n\t\t\t$address, \n\t\t\t$latitude, \n\t\t\t$longitude,\n\t\t\t$opening_hours);",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "1935d058d95bd247"
            ]
        ]
    },
    {
        "id": "7fc9d64c64aed7b5",
        "type": "postgresql",
        "z": "11a6bc149c21cc99",
        "name": "INSERT INTO user",
        "query": "INSERT INTO \"user\"(\n\tusername, password, gender, user_photo)\n\tVALUES ($username, $password, $gender, $user_photo);",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "e94e0eb68f82da5e"
            ]
        ]
    },
    {
        "id": "6b9cc65ee8c67bf7",
        "type": "postgresql",
        "z": "11a6bc149c21cc99",
        "name": "GET user by username",
        "query": "SELECT * FROM \"user\"\nWHERE username=$username;",
        "postgreSQLConfig": "b1fda389a7c4172e",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 360,
        "y": 500,
        "wires": [
            [
                "0939480117897ec3"
            ]
        ]
    },
    {
        "id": "de34d73ddb843e11",
        "type": "bcrypt",
        "z": "11a6bc149c21cc99",
        "name": "Hash password (10 rounds)",
        "action": "encrypt",
        "field": "queryParameters.password",
        "hash": "payload",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "7fc9d64c64aed7b5"
            ]
        ]
    },
    {
        "id": "fc72f6dd27a8929c",
        "type": "bcrypt",
        "z": "11a6bc149c21cc99",
        "name": "Verify hash (10 rounds)",
        "action": "verify",
        "field": "checkpassword",
        "hash": "dbReturn.password",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 960,
        "y": 460,
        "wires": [
            [
                "7ad6d566ca18f433"
            ]
        ]
    },
    {
        "id": "080bc7ce33e77583",
        "type": "debug",
        "z": "5a455541.3fdcac",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "988afc6f6d6092eb",
        "type": "inject",
        "z": "5a455541.3fdcac",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "plaintext",
                "v": "ABCDE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ABCDE",
        "payloadType": "str",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "4247d0ee9a353cf4"
            ]
        ]
    },
    {
        "id": "3d0a85efcf28a80e",
        "type": "debug",
        "z": "5a455541.3fdcac",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "42d3496d34ffd276",
        "type": "bcrypt",
        "z": "5a455541.3fdcac",
        "name": "",
        "action": "verify",
        "field": "plaintext",
        "hash": "payload",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 420,
        "y": 260,
        "wires": [
            [
                "080bc7ce33e77583"
            ]
        ]
    },
    {
        "id": "4247d0ee9a353cf4",
        "type": "bcrypt",
        "z": "5a455541.3fdcac",
        "name": "",
        "action": "encrypt",
        "field": "payload",
        "hash": "payload",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "3d0a85efcf28a80e",
                "42d3496d34ffd276"
            ]
        ]
    }
]